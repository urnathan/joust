# Nathan's Utils		-*- mode:Makefile -*-
# Copyright (C) 2019-2020 Nathan Sidwell, nathan@acm.org
# License: Affero GPL v3.0

ifeq (0,$(MAKELEVEL))
ifneq (,@tools@)
$(info Prepending @tools@ to PATH)
PATH := @tools@:$(PATH)
export PATH
endif

# Figure out if we should set parallelism
ifeq (,$(filter clean%,$(MAKECMDGOALS)))
PARALLELISM := $(shell grep -c '^processor' /proc/cpuinfo 2>/dev/null)
endif
endif

ifeq (00,$(MAKELEVEL)$(if $(PARALLELISM),0,1))
# Although Make 4.3 documentation suggests I can set parallelism just
# by appending to MAKEFLAGS, it doesn't seem to work
$(info Parallelizing $(PARALLELISM) ways)
MAKEFLAGS += -j$(PARALLELISM)
ifneq (,$(MAKECMDGOALS))
$(MAKECMDGOALS): recurse
endif
recurse:
	$(MAKE) -r$(MAKEFLAGS) $(MAKECMDGOALS)
.PHONY: recurse
else

srcdir := @srcdir@
SUBDIRS := @SUBDIRS@
SUBPROJS := @SUBPROJS@
SHELL := zsh

CXX := @CXX@
AR := @AR@

# C++ compiler options
CXXFLAGS := @CXXFLAGS@
CXXOPTS := $(CXXFLAGS)
# Code generation
ifeq ($(notdir $(firstword $(CXX))),g++)
CXXOPTS += -fno-enforce-eh-specs
endif
CXXOPTS += -fno-stack-protector -fno-threadsafe-statics
CXXOPTS += -fno-exceptions -fno-rtti
ifeq ($(filter -fdebug-prefix-map=%,$(CXXOPTS)),)
CXXOPTS += -fdebug-prefix-map=${srcdir}/=
endif
# Warning options
CXXOPTS += -W -Wall -Woverloaded-virtual -Wshadow
CXXOPTS += -Wno-invalid-offsetof -Wno-unused-variable
CXXOPTS += -Wno-missing-field-initializers
# Diagnostic options, look at controlling terminal so that piping
# through more works
MLEN := $(shell stty size </dev/tty 2>/dev/null | cut -d' ' -f2)
ifneq (,$(MLEN))
CXXOPTS += -fmessage-length=$(MLEN)
endif
CXXOPTS += -fdiagnostics-color=always -fno-diagnostics-show-option
# Config
CXXOPTS += $(filter-out -DHAVE_CONFIG_H,@DEFS@) -include config.h

# Linker options
LDFLAGS := @LDFLAGS@ -L .
LDFLAGS += @ldbacktrace@ -Wl,--no-undefined
LIBS := @LIBS@

# Per-source & per-directory compile flags (warning: recursive)
SRC_CXXFLAGS = $(CXXFLAGS$(patsubst $(srcdir)%,%,$1)) \
	$(if $(filter-out $(srcdir)/,$1),\
	  $(call $0,$(dir $(patsubst %/,%,$1))))

vpath %.in $(srcdir)
vpath %.cc $(srcdir)

.SUFFIXES: .o .cc

%.o: %.cc
	@mkdir -p $(dir $@)
	$(CXX) $(strip $(CXXOPTS) -MMD -MP \
	  -MF ${@:.o=.d} $(call SRC_CXXFLAGS,$<)) -c -o $@ $<

all:: Makefile $(addprefix all.,$(SUBPROJS) $(SUBDIRS))

check:: Makefile $(addprefix check.,$(SUBPROJS) $(SUBDIRS))

clean:: Makefile $(addprefix clean.,$(SUBPROJS) $(SUBDIRS))

$(addprefix all.,$(SUBPROJS)): all.%: %/Makefile
	$(MAKE) -C $(@:all.%=%) all

$(addprefix check.,$(SUBPROJS)): check.%: %/Makefile
	$(MAKE) -C $(@:check.%=%) check

$(addprefix clean.,$(SUBPROJS)): clean.%: %/Makefile
	$(MAKE) -C $(@:clean.%=%) clean

$(addsuffix /Makefile,$(SUBPROJS)): %/Makefile: $(srcdir)/%/configure
	pfx=$$(echo $(@D)/ | sed 's+[^/]*/+../+g') ;\
	mkdir -p $(@D); pushd $(@D); \
	$${pfx}$< --srcdir=$${pfx}$(<D) @configure_args@

all:: .gdbinit

.gdbinit: gdbinit
	rm -f $@ ; ln -s $< $@

clean::
	rm -f .gdbinit gdbinit

revision.stamp: $(addprefix $(srcdir)/,$(SUBDIRS))
	@revision=$$(git -C $(srcdir) rev-parse HEAD 2>/dev/null) ;\
	if test -n "$$revision" ;\
	then revision=git-$$revision ;\
	  if git -C $(srcdir) status --porcelain 2>/dev/null | grep -vq '^  ' ;\
	  then revision+=M ;\
	  fi ;\
	else revision=unknown ;\
	fi ;\
	echo $$revision > $@

revision: revision.stamp
	@cmp -s $< $@ || cp $< $@

clean::
	rm -f revision revision.stamp

distclean:: clean
	rm -f config.log config.status

$(srcdir)/configure: $(srcdir)/configure.ac
	cd $(@D) && autoconf -W all,error

config.h: config.status config.h.in
	./$< --header=$@
	touch $@

$(srcdir)/config.h.in: $(srcdir)/configure.ac
	cd $(<D) && autoheader -f -W all,error

ifeq ($(filter %clean,$(MAKECMDGOALS)),)
@CONFIG_FILES@: %: config.status %.in
	./$< --file=$@
	touch $@
endif

config.status: $(srcdir)/configure $(srcdir)/config.h.in
	if test -x $@; then ./$@ -recheck; else $< @configure_args@; fi

-include $(addsuffix /Makesub,$(SUBDIRS) .)
-include $(addsuffix /tests/Makesub,$(SUBDIRS) .)

distclean:: clean
	rm -f config.h
	rm -rf $(SUBDIRS)

maintainer-clean:: distclean
	rm -f $(srcdir)/config.h.in

clean::
	rm -f $(shell find $(srcdir) -name '*~')

.PHONY: all check clean distclean maintainer-clean
.PHONY: $(addprefix all.,$(SUBPROJS))
.PHONY: $(addprefix check.,$(SUBPROJS))
.PHONY: $(addprefix clean.,$(SUBPROJS))

endif
